SOLID PRINCIPLES
----------------
1)---> Single Responsibility Principle (SRP) states that a class should have only one reason to change.
It means the class should handle only one responsibility or job. 
//Valid Example for single responsibility
-----------------------------------------
class WatchMan
{
    void openDoor()
    {
        System.out.println("Open a door...");
    }
}

class Receptionist
{
    void getDetails()
    {
        System.out.println("Enter the valid details...");
    }
}

class RoomBoy
{
    void serveLunch()
    {
        System.out.println("Go and get my lunch...");
    }
}

class Cleaner
{
    void clean()
    {
        System.out.println("Clean a room...");
    }
}

public class Employee
{
    public static void main(String [] args)
    {
        WatchMan watchman=new WatchMan();
        watchman.openDoor();
        Receptionist receptionist=new Receptionist();
        receptionist.getDetails();
        RoomBoy roomboy=new RoomBoy();
        roomboy.serveLunch();
        Cleaner cleaner=new Cleaner();
        cleaner.clean();
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Invalid Example for single responsiblity:
----------------------------------------
public class Employee
{
    private void watchMan()
    {
        System.out.println("Open the door...");
    }
    
    private void receptionist()
    {
        System.out.println("Enter the details...");
    }
    
    private void roomBoy()
    {
        System.out.println("Carry on my lugguage...");
    }
    
    private void cleaner()
    {
        System.out.println("Clean the rooms...");
    }
    
    public static void main(String [] args)
    {
        Employee employee=new Employee();
        employee.watchMan();
        employee.receptionist();
        employee.roomBoy();
        employee.cleaner();
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2)---->Open/Closed Principle (OCP)
---------------------------

Example for invalid OCP principle:
----------------------------------

public class Payment
{
    private void cashPay()
    {
        System.out.println("Cash on delivery");
    }
    private void UPIpayment()
    {
        System.out.println("Online Payment");
    }
    private void walletPayment()
    {
        System.out.println("Wallet Payment");
    }
    public static void main (String [] args)
    {
        Payment payment=new Payment();
        payment.cashPay();
        payment.UPIpayment();
        payment.walletPayment();
    }
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Valid Example for OCP principle :
---------------------------------

abstract class Payment {
    abstract void pay();
}

class CashPayment extends Payment {
    public void pay() {
        System.out.println("Cash on delivery");
    }
}

class UpiPayment extends Payment {
    public void pay() {
        System.out.println("Online Payment");
    }
}

class WalletPayment extends Payment {
    public void pay() {
        System.out.println("Wallet Payment");
    }
}

public class Main {
    public static void main(String[] args) {
        Payment payment = new UpiPayment();  
        payment.pay();
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


